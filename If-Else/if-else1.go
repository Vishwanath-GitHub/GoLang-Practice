package main

import "fmt"

func main() {
	//In any of the statement blocks in GoLang, curly braces are compulsory. Even single statement blocks require curly braces.
	//Boolean values can directly be used in if-else statements
	if true {
		fmt.Println("This is true.")
	}
	
	//Initializer syntax can be used in if-else
	//It can also be used with comma-ok syntax
	//In this syntax, some value is generated by some operations inside if statement itself and then after a semi-colon, the value is checked
	//Also, the values generated by this syntax can't be used outside if-else blocks
	map1:= map[string]int{
		"1st": 65,
		"2nd": 94,
	}
	if _,ok:=map1["2nd"]; ok {
		fmt.Println("2nd is present")
	}
	fmt.Println()

	//All the comparison operators can be used with if-else
	//These comparison operators actually give output as boolean values
	var1:=56
	var2:=97
	if var1 > var2 {
		fmt.Println("var 2 is bigger")
	}
	if var1 < var2 {
		fmt.Println("var 1 is bigger")
	}
	if var1 == var2 {
		fmt.Println("both are equal")
	}
	if var1 >= var2 {
		fmt.Println("var 1 is bigger or equal")
	}
	if var1 <= var2 {
		fmt.Println("var 2 is bigger or equal")
	}
	if var1!=var2 {
		fmt.Println("not equal")
	}

	//Using logical operators with if-else
	if var1 > var2 && var1 >=var2 {
		fmt.Println("var1 is bigger")
	}
	if var1 < var2 || var1 ==var2 {
		fmt.Println("they are equal of var1 is smaller")
	}
	fmt.Println()

	//Nesting if-else
	if var1 < var2 {
		if var1 <= var2 {
			fmt.Println("var1 is smaller")
		}
	}
	fmt.Println()

	//Using NOT operator to flip boolean values
	if !false {
		fmt.Println("true")
	}
	fmt.Println()
}
